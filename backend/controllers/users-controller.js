const { validationResult } = require("express-validator");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const User = require("../models/user");
const HttpError = require("../models/http-error");

const getUsers = async (req, res, next) => {
  let users;
  try {
    // users = User.find({}, 'name email') //display all data except password
    users = await User.find({}, "-password"); //display all data except password
  } catch (err) {
    const error = new HttpError("Fetching users failed, try again", 500);
    return next(error);
  }
  res.json({ users: users.map((user) => user.toObject({ getters: true })) });
};

const signup = async (req, res, next) => {
  console.log("reached backend signup");
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return next(new HttpError("Invalid inputs, check data", 422));
  }
  //return next passes the error to the next middleware in the request-response cycle.

  const { name, email, password } = req.body;

  let existingUser;
  try {
    existingUser = await User.findOne({ email: email });
  } catch (err) {
    const error = new HttpError("Signing up failed, pls try again later", 500);
    return next(error);
  }

  if (existingUser) {
    const error = new HttpError(
      "User already exists, please log in instead",
      422
    );
    return next(error);
  }

  let hashedPassword;
  try {
    hashedPassword = await bcrypt.hash(password, 12);
  } catch (err) {
    const error = new HttpError("Could not create user, try again", 500);
    return next(error);
  }

  const createdUser = new User({
    email,
    name,
    // image: "https://unsplash.com/photos/ZHvM3XIOHoE",
    password: hashedPassword,
  });

  console.log("reached createdUser");
  try {
    await createdUser.save();
  } catch (err) {
    const error = new HttpError("signing up failed, try again", 500);
    console.log(err);
    return next(error);
  }

  let token;
  try {
    token = jwt.sign(
      { userId: createdUser.id, email: createdUser.email }, //id generated by mongoDB
      "supersecret_dont_share",
      { expiresIn: "1h" }
    );
  } catch (err) {
    const error = new HttpError("signing up failed, try again", 500);
    return next(error);
  }
  res
    .status(201)
    .json({
      userId: createdUser.id,
      email: createdUser.email,
      name: createdUser.name,
      token: token,
    });
};

const login = async (req, res, next) => {
  const { email, password } = req.body;

  let existingUser;
  try {
    existingUser = await User.findOne({ email: email });
  } catch (err) {
    const error = new HttpError("logging failed, pls try again later", 500);
    return next(error);
  }

  if (!existingUser) {
    const error = new HttpError(
      "Invalid credentials, could not log you in",
      401
    );
    return next(error);
  }

  //check if hashedpassword is correct
  let isValidPassword = false;
  try {
    isValidPassword = await bcrypt.compare(password, existingUser.password);
  } catch (err) {
    const error = new HttpError(
      "Could not log you in, please check your credentials and try again",
      500
    );
    return next(error);
  }

  if (!isValidPassword) {
    const error = new HttpError("Invalid password, could not log you in", 401);
    return next(error);
  }

  //generate token
  let token;
  try {
    token = jwt.sign(
      { userId: existingUser.id, email: existingUser.email },
      "supersecret_dont_share",
      { expiresIn: "1h" }
    );
  } catch (err) {
    const error = new HttpError("logging in failed, try again", 500);
    return next(error);
  }

  // res.json({
  //   message: "Logged in",
  //   user: existingUser.toObject({ getters: true }),
  // });

  res.json({
    userId: existingUser.id,
    userName: existingUser.name,
    email: existingUser.email,
    token: token,
  });
};

exports.getUsers = getUsers;
exports.login = login;
exports.signup = signup;
